
<!DOCTYPE html>
<html>
<head>
  <title>visiJUKE</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <link href="/assets/favicon.ico" rel="shortcut icon" type="image/x-icon" />
  <%= csrf_meta_tags %>
</head>
<body>
  <header><h2 class="center" style="background-color:blue; margin:0;">visiJUKE</h2></header>
    <%= yield %>
</body>
<script>

//use erb to iterate over the @soundc instance variable in order to dynamically create audio sources onto the DOM
<% @soundc.each do |x| %>
var audio<%= x['id'] %> = new Audio();
audio<%= x['id'] %>.src = "<%= x['stream_url']%>.json?client_id=<%=ENV['SoundCloudKey']%>";
audio<%= x['id'] %>.controls = true;
audio<%= x['id'] %>.autoplay = false;
audio<%= x['id'] %>.crossOrigin="anonymous";
document.getElementById("track<%=x['id']%>").appendChild(audio<%=x['id']%>);
<% end %>
//set up Web Audio API by establishing the AudioContext and the analyser
var context	= new AudioContext();
var analyser	= context.createAnalyser()
//tell the audioContext that it's going to the analyser
context.destination = analyser;
//canvas is created in the DOM the actual eq shapes are precooked into the webaudioX sourcecode
var canvas	= document.getElementById('soundhopper')
canvas.width = window.innerWidth;
canvas.height = window.innerHeight*.65;
var ctx		= canvas.getContext("2d");
document.body.appendChild(canvas)
// I call up WebaudioX's analyser2canvas object to load it onto the DOM
var analyser2canvas	= new WebAudiox.Analyser2Canvas(analyser, canvas)
<% @soundc.each do |x| %>
window.addEventListener('load', function(e) {
 //loading the tracks to the soundhopper canvas
  var source = context.createMediaElementSource(audio<%=x['id']%>);
  source.connect(analyser);
  //connecting the analsyer to the audio context
  analyser.connect(context.destination);
  //this is where the music gets animated
  requestAnimationFrame(function update() {
  requestAnimationFrame(update);
  // clear the canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  // put the sound in the canvas
  analyser2canvas.update()
  });
}, false);
<% end %>
</script>
</html>
